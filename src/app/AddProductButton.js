import Swal from "sweetalert2";

export default function AddProductButton({ type }) {
  return (
    <button
      className="flex items-center justify-center aspect-square w-lg h-80 rounded-md border-2 border-dashed border-gray-300 text-gray-500 hover:text-gray-700 hover:border-gray-500 transition"
      onClick={async () => {
        let selectedType = type;

        if (!type) {
          const { value: newType } = await Swal.fire({
            title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            input: "text",
            inputPlaceholder: "‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            showCancelButton: true,
            confirmButtonText: "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
            inputValidator: (value) => {
              if (!value.trim()) {
                return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
              }
            },
          });

          if (!newType) return;
          selectedType = newType;
        }

        const { value: productData } = await Swal.fire({
          title: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î ${selectedType}`,
          html: `
            <label id="upload-label" class="upload-box">
              <span id="upload-text">‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ</span>
              <img id="preview-image" class="hidden preview-img">
            </label>
            <input id="product-image" type="file" accept="image/*" class="hidden">
            <input id="product-name" class="swal2-input" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤">
          `,
          focusConfirm: false,
          showCancelButton: true,
          confirmButtonText: "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
          didOpen: () => {
            const popup = Swal.getPopup();
            const fileInput = popup.querySelector("#product-image");
            const previewImage = popup.querySelector("#preview-image");
            const uploadLabel = popup.querySelector("#upload-label");
            const uploadText = popup.querySelector("#upload-text");

            uploadLabel.addEventListener("click", () => fileInput.click());

            fileInput.addEventListener("change", async (event) => {
              const file = event.target.files[0];
              if (!file) {
                console.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å");
                return;
              }
              console.log("üìÇ Uploading file:", file.name, file.size, file.type);
            
              if (file) {``
                const formData = new FormData();
                formData.append("file", file);
            
                // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà API
                const uploadResponse = await fetch("/api/upload", {
                  method: "POST",
                  body: formData,
                });
            
                const uploadData = await uploadResponse.json();
                console.log('uploadData : ', uploadData)
            
                if (!uploadResponse.ok) {
                  Swal.showValidationMessage("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                  return;
                }
            
                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                previewImage.src = uploadData.fileUrl;
                previewImage.classList.remove("hidden");
                uploadText.classList.add("hidden");
                previewImage.dataset.imageData = uploadData.fileUrl;
              }
            });
          },
          preConfirm: () => {
            const popup = Swal.getPopup();
            const name = popup.querySelector("#product-name").value;
            const previewImage = popup.querySelector("#preview-image");

            if (!name) {
              Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
              return false;
            }
            if (!previewImage.src || previewImage.classList.contains("hidden")) {
              Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
              return false;
            }

            return { name, image: previewImage.dataset.imageData };
          },
        });

        if (!productData) return;

        const { value: price } = await Swal.fire({
          title: `‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á "${productData.name}"`,
          input: "number",
          inputPlaceholder: "‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
          showCancelButton: true,
          confirmButtonText: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
          inputValidator: (value) => {
            if (!value || value <= 0) {
              return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
            }
          },
        });

        if (!price) return;

        try {
          const response = await fetch("/api/products", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              name: productData.name,
              type: selectedType,
              price: parseFloat(price),
              image: productData.image,
            }),
          });

          if (!response.ok) {
            throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
          }

          Swal.fire({
            title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!",
            html: `
              <img src="${productData.image}" alt="Product Image" class="preview-img"/>
              <p>‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${selectedType}</p>
              <p>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${productData.name}</p>
              <p>‡∏£‡∏≤‡∏Ñ‡∏≤: ${price} ‡∏ö‡∏≤‡∏ó</p>
            `,
            icon: "success",
          });
        } catch (error) {
          Swal.fire({
            title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
            text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ",
            icon: "error",
          });
        }
      }}
    >
      <span className="text-5xl font-bold">+</span>
    </button>
  );
}